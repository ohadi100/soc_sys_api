/* Copyright (c) 2023 Volkswagen Group */

#ifndef CSM_ACCESSOR_CRYPTO_HPP
#define CSM_ACCESSOR_CRYPTO_HPP

#include "ICsmAccessor.hpp"

namespace sok {
namespace common {

class CsmAccessorCrypto : public ICsmAccessor {
public:
    CsmAccessorCrypto();

    /**
     * @brief Creates MAC
     * 
     * @param keyId symmetric key identifier to create the MAC with
     * @param data data to calculate the MAC over
     * @param alg algorithm of the MAC
     * @return CsmResult<std::vector<uint8_t>> Result object containing the generated MAC on success, error code otherwise
     */
    CsmResult<std::vector<uint8_t>> MacCreate(uint16_t keyId, std::vector<uint8_t> const& data, MacAlgorithm alg) const override;

    /**
     * @brief Verifies MAC
     * 
     * @param keyId symmetric key identifier to verify the MAC with
     * @param data the data to verify
     * @param mac the authenticator
     * @param alg algorithm of the MAC
     * @return CsmErrorCode kSuccess upon success, error code otherwise
     */
    CsmErrorCode MacVerify(uint16_t keyId, std::vector<uint8_t> const& data, std::vector<uint8_t> const& mac, MacAlgorithm alg) const override;

    /**
     * @brief Checks if the provided key identifier exists
     * 
     * @param keyId key identifier
     * @return CsmErrorCode kSuccess if key exists, error code otherwise
     */
    CsmErrorCode IsKeyExists(uint16_t keyId) const override;

    /**
     * @brief Generates random vector of bytes at the provided size
     * 
     * @param size amount of bytes to generate
     * @return CsmResult<std::vector<uint8_t>> Result object containing the generated byte vector, error code otherwise 
     */
    CsmResult<std::vector<uint8_t>> GenerateRandomBytes(uint8_t size) const override;
};    

} // namespace common
} // namespace sok

#endif // CSM_ACCESSOR_CRYPTO_HPP