// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sok_demo_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sok_5fdemo_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sok_5fdemo_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sok_5fdemo_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sok_5fdemo_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sok_5fdemo_5fmsg_2eproto;
class SokDemoMessage;
struct SokDemoMessageDefaultTypeInternal;
extern SokDemoMessageDefaultTypeInternal _SokDemoMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SokDemoMessage* Arena::CreateMaybeMessage<::SokDemoMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SokDemoMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SokDemoMessage) */ {
 public:
  inline SokDemoMessage() : SokDemoMessage(nullptr) {}
  ~SokDemoMessage() override;
  explicit PROTOBUF_CONSTEXPR SokDemoMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SokDemoMessage(const SokDemoMessage& from);
  SokDemoMessage(SokDemoMessage&& from) noexcept
    : SokDemoMessage() {
    *this = ::std::move(from);
  }

  inline SokDemoMessage& operator=(const SokDemoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SokDemoMessage& operator=(SokDemoMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SokDemoMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SokDemoMessage* internal_default_instance() {
    return reinterpret_cast<const SokDemoMessage*>(
               &_SokDemoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SokDemoMessage& a, SokDemoMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SokDemoMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SokDemoMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SokDemoMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SokDemoMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SokDemoMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SokDemoMessage& from) {
    SokDemoMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SokDemoMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SokDemoMessage";
  }
  protected:
  explicit SokDemoMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtectionMsgFieldNumber = 2,
    kPduIdFieldNumber = 1,
  };
  // optional bytes protection_msg = 2;
  bool has_protection_msg() const;
  private:
  bool _internal_has_protection_msg() const;
  public:
  void clear_protection_msg();
  const std::string& protection_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protection_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protection_msg();
  PROTOBUF_NODISCARD std::string* release_protection_msg();
  void set_allocated_protection_msg(std::string* protection_msg);
  private:
  const std::string& _internal_protection_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protection_msg(const std::string& value);
  std::string* _internal_mutable_protection_msg();
  public:

  // int32 pdu_id = 1;
  void clear_pdu_id();
  int32_t pdu_id() const;
  void set_pdu_id(int32_t value);
  private:
  int32_t _internal_pdu_id() const;
  void _internal_set_pdu_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SokDemoMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protection_msg_;
    int32_t pdu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sok_5fdemo_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SokDemoMessage

// int32 pdu_id = 1;
inline void SokDemoMessage::clear_pdu_id() {
  _impl_.pdu_id_ = 0;
}
inline int32_t SokDemoMessage::_internal_pdu_id() const {
  return _impl_.pdu_id_;
}
inline int32_t SokDemoMessage::pdu_id() const {
  // @@protoc_insertion_point(field_get:SokDemoMessage.pdu_id)
  return _internal_pdu_id();
}
inline void SokDemoMessage::_internal_set_pdu_id(int32_t value) {
  
  _impl_.pdu_id_ = value;
}
inline void SokDemoMessage::set_pdu_id(int32_t value) {
  _internal_set_pdu_id(value);
  // @@protoc_insertion_point(field_set:SokDemoMessage.pdu_id)
}

// optional bytes protection_msg = 2;
inline bool SokDemoMessage::_internal_has_protection_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SokDemoMessage::has_protection_msg() const {
  return _internal_has_protection_msg();
}
inline void SokDemoMessage::clear_protection_msg() {
  _impl_.protection_msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SokDemoMessage::protection_msg() const {
  // @@protoc_insertion_point(field_get:SokDemoMessage.protection_msg)
  return _internal_protection_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SokDemoMessage::set_protection_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.protection_msg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SokDemoMessage.protection_msg)
}
inline std::string* SokDemoMessage::mutable_protection_msg() {
  std::string* _s = _internal_mutable_protection_msg();
  // @@protoc_insertion_point(field_mutable:SokDemoMessage.protection_msg)
  return _s;
}
inline const std::string& SokDemoMessage::_internal_protection_msg() const {
  return _impl_.protection_msg_.Get();
}
inline void SokDemoMessage::_internal_set_protection_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.protection_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SokDemoMessage::_internal_mutable_protection_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.protection_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* SokDemoMessage::release_protection_msg() {
  // @@protoc_insertion_point(field_release:SokDemoMessage.protection_msg)
  if (!_internal_has_protection_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.protection_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protection_msg_.IsDefault()) {
    _impl_.protection_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SokDemoMessage::set_allocated_protection_msg(std::string* protection_msg) {
  if (protection_msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.protection_msg_.SetAllocated(protection_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protection_msg_.IsDefault()) {
    _impl_.protection_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SokDemoMessage.protection_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sok_5fdemo_5fmsg_2eproto
